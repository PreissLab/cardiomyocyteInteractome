}
head(rownames(wcl.df))
is.na(rownames(wcl.df))
for (i in rownames(wcl.df)) {
print(i)
#   kL1 <- keggLink("mmu", paste("mmu", i, sep = ""))
#   wcl.df[i, ]$count <- length(which(wcl.keggIDs %in% kL1))
#   wcl.df[i, ]$frac <- round(length(which(wcl.keggIDs %in% kL1)) / length(kL1) * 100, 2)
}
head(wcl.df)
tail(wcl.df)
View(wcl.df)
dim(wcl.df)
length(rownames(wcl.df))
table(is.na(rownames(wcl.df)))
wcl.df[c("04921", NA, "04971"),]
length(wcl.pathways.genes)
wcl.pathways.genes
names(wcl.pathways.genes)
dim(wcl.df)
wcl.df[c("04921", NA, "04971"),]
which(names(wcl.pathways.genes) %in% c("04921", "04971")]
which(names(wcl.pathways.genes) %in% c("04921", "04971"))
which(names(wcl.pathways.genes) %in% c("mmu04921", "mmu04971"))
names(wcl.pathways.genes)[c(23:25)]
kegg.brite[04923,]
kegg.brite["04923",]
head(kegg.brite)
kegg.brite["04921",]
kegg.brite["04971",]
kegg.brite["04923",]
kegg.brite <- read.xls("/Users/u1001407/Dropbox/REM project-Sebastian/Analysis/KEGG_Brite_Hierarchy.xlsx", sheet = 1, as.is = T)
ids <- unlist(lapply(strsplit(kegg.brite$C, " "), function(x) x[1]))
rownames(kegg.brite) <- ids
save(kegg.brite, file = "data/kegg.brite.rda")
wcl.df <- kegg.brite[gsub("mmu", "", wcl.pathways), ]
dim(wcl.df)
wcl.df$ID <- rownames(wcl.df)
wcl.df$total <- rep(0, nrow(wcl.df))
wcl.df$total <- sapply(rownames(wcl.df), function(x) length(wcl.pathways.genes[[paste("mmu", x, sep = "")]]))
wcl.df$count <- rep(0, nrow(wcl.df))
wcl.df$frac <- rep(0, nrow(wcl.df))
for (i in rownames(wcl.df)) {
#  print(i)
kL1 <- keggLink("mmu", paste("mmu", i, sep = ""))
wcl.df[i, ]$count <- length(which(wcl.keggIDs %in% kL1))
wcl.df[i, ]$frac <- round(length(which(wcl.keggIDs %in% kL1)) / length(kL1) * 100, 2)
}
save(wcl.df, file = "data/wcl.df.rda")
wcl.in_path.IDs <- lapply(rownames(wcl.df), function(x) {
kL1 <- keggLink("mmu", paste("mmu", x, sep = ""))
in_path <- wcl.keggIDs[which(wcl.keggIDs %in% kL1)]
})
names(wcl.in_path.IDs) <- rownames(wcl.df)
bkgd <- length(unique(total.keggIDs))
smpl <- length(wcl.keggIDs)
ftl <- apply(wcl.df[1,], 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
wcl.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
wcl.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
wcl.df$ft_fdr <- p.adjust(wcl.df$ft_pval, method = "fdr")
save(wcl.df, file = "data/wcl.df.rda")
head(wcl.df)
summary(wcl.df$ft_pval)
summary(wcl.df$ft_fdr)
summary(wcl.df$ft_OR)
length(unique(total.keggIDs))
interactome.entrez_ids <- getBM(attributes = c("ensembl_gene_id","entrezgene"), values = interactome[,"ensembl_gene_id"], filters = "ensembl_gene_id", mart = mouse)
interactome.human_homologs <- getBM(attributes = c("ensembl_gene_id","hsapiens_homolog_ensembl_gene"), values = interactome[,"ensembl_gene_id"], filters = "ensembl_gene_id", mart = mouse)
interactome.mim <- getBM(attributes = c("ensembl_gene_id", "mim_morbid_accession"), values = interactome.human_homologs[,"hsapiens_homolog_ensembl_gene"], filters = "ensembl_gene_id", mart = human)
interactome.entrez_ids <- interactome.entrez_ids[-which(duplicated(interactome.entrez_ids$ensembl_gene_id)),]
interactome <- merge(interactome, interactome.entrez_ids, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id", all.x = T)
interactome.entrezIDs <- unique(interactome[!is.na(interactome$entrezgene),]$entrezgene)
interactome.keggIDs <- keggConv.batch(interactome.entrezIDs)
save(interactome.keggIDs, file = "data/interactome.keggIDs.rda")
keggQ <- lapply(interactome.keggIDs, function(x) keggGet(x))
save(interactome.entrezIDs, file = "data/interactome.entrezIDs")
interactome.keggQ <- keggQ
save(interactome.keggQ, "data/interactome.keggQ.rda")
save(interactome.keggQ, file =  "data/interactome.keggQ.rda")
save(interactome.keggIDs, file = "data/interactome.keggIDs.rda")
interactome.pathways <- unique(unlist(lapply(strsplit(names(unlist(lapply(interactome.keggQ, function(x) x[[1]]$"PATHWAY"))), "\\."), function(x) x[3])))
interactome.pathways.genes <- lapply(interactome.pathways, function(x) keggLink("genes", x))
names(interactome.pathways.genes) <- interactome.pathways
interactome.pathways.genes.entrez_ids <- unique(gsub("mmu:", "", as.character(unlist(interactome.pathways.genes))))
save(interactome.pathways, file = "data\interactome.pathways.rda")
save(interactome.pathways.genes, file = "data/interactome.pathways.genes.rda")
interactome.pathways.genes.entrez_ids <- unique(gsub("mmu:", "", as.character(unlist(interactome.pathways.genes))))
save(interactome.pathways, file = "data/interactome.pathways.rda")
names(interactome.pathways.genes) <- interactome.pathways
save(interactome.pathways.genes, file = "data/interactome.pathways.genes.rda")
interactome.pathways.genes.entrez_ids <- unique(gsub("mmu:", "", as.character(unlist(interactome.pathways.genes))))
interactome.df <- kegg.brite[gsub("mmu", "", interactome.pathways), ]
interactome.df$source <- rep("Interactome", nrow(interactome.df))
interactome.df$ID <- rownames(interactome.df)
i1 <- intersect(rownames(interactome.df), rownames(wcl.df))
interactome.df$total <- rep(0, nrow(interactome.df))
interactome.df[i1,]$total <- wcl.df[i1,]$count
interactome.df$count <- rep(0, nrow(interactome.df))
interactome.df$frac <- rep(0, nrow(interactome.df))
for (i in rownames(interactome.df)) {
kL1 <- keggLink("mmu", paste("mmu", i, sep = ""))
interactome.df[i, ]$count <- length(which(interactome.keggIDs %in% kL1))
interactome.df[i, ]$frac <- round(length(which(interactome.keggIDs %in% kL1)) / length(kL1) * 100, 2)
}
# extract list of IDs in pathway
interactome.in_path.IDs <- lapply(rownames(interactome.df), function(x) {
kL1 <- keggLink("mmu", paste("mmu", x, sep = ""))
in_path <- interactome.keggIDs[which(interactome.keggIDs %in% kL1)]
})
# perform Fisher's Exact Test for each category
bkgd <- length(unique(wcl.keggIDs))
smpl <- length(interactome.keggIDs)
ftl <- apply(interactome.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
head(interactome.df )
summary(interactome.df$ft_pval )
interactome.B.df$ft_fdr <- p.adjust(interactome.B.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
interactome.df$ft_fdr <- p.adjust(interactome.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.df, file = "data/interactome.df.rda")
interactome.B.df <- data.frame(matrix(ncol = 5, nrow = length(unique(interactome.df$B))))
colnames(interactome.B.df) <- c("B", "A", "total", "count", "source")
interactome.B.df$B <- unique(interactome.df$B)
interactome.B.df$A <- sapply(unique(interactome.df$B), function(x) {A <- unique(interactome.df[which(interactome.df$B %in% x), "A"])})
interactome.B.df$source <- rep("Interactome", nrow(interactome.B.df))
interactome.B.df$total <- sapply(unique(interactome.df$B), function(x) {tot <- sum(interactome.df[which(interactome.df$B %in% x), "total"])})
interactome.B.df$count <- sapply(unique(interactome.df$B), function(x) {count <- sum(interactome.df[which(interactome.df$B %in% x), "count"])})
bkgd <- length(unique(wcl.keggIDs))
smpl <- length(interactome.keggIDs)
ftl <- apply(interactome.B.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.B.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.B.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
interactome.B.df$ft_fdr <- p.adjust(interactome.B.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.B.df, file = "data/interactome.B.df.rda")
# subset the interactome table
interactome.go_rna_unrelated <- interactome[which(interactome$GO == "unrelated"),]
interactome.go_rna_unrelated.entrezIDs <- unique(interactome.go_rna_unrelated[!is.na(interactome.go_rna_unrelated$entrezgene),]$entrezgene)
interactome.go_rna_unrelated.keggIDs <- keggConv.batch(interactome.go_rna_unrelated.entrezIDs)
# dataframe for count data
interactome.go_rna_unrelated.df <- interactome.df
interactome.go_rna_unrelated.df$source <- rep("GO_RNA_unrelated", nrow(interactome.go_rna_unrelated.df))
interactome.go_rna_unrelated.df$ID <- rownames(interactome.go_rna_unrelated.df)
interactome.go_rna_unrelated.df$total <- rep(0, nrow(interactome.go_rna_unrelated.df))
# we are now using WCL as background to test for enrichment
i1 <- intersect(rownames(interactome.go_rna_unrelated.df), rownames(wcl.df))
interactome.go_rna_unrelated.df[i1,]$total <- wcl.df[i1,]$count
interactome.go_rna_unrelated.df$count <- rep(0, nrow(interactome.go_rna_unrelated.df))
for (i in rownames(interactome.go_rna_unrelated.df)) {
kL1 <- keggLink("mmu", paste("mmu", i, sep = ""))
interactome.go_rna_unrelated.df[i, ]$count <- length(which(interactome.go_rna_unrelated.keggIDs %in% kL1))
}
interactome.go_rna_unrelated.in_path.IDs <- lapply(rownames(interactome.go_rna_unrelated.df), function(x) {
kL1 <- keggLink("mmu", paste("mmu", x, sep = ""))
in_path <- interactome.go_rna_unrelated.keggIDs[which(interactome.go_rna_unrelated.keggIDs %in% kL1)]
})
names(interactome.go_rna_unrelated.in_path.IDs) <- rownames(interactome.go_rna_unrelated.df)
# Using WCL as background
bkgd <- length(unique(wcl.keggIDs))
smpl <- length(interactome.go_rna_unrelated.keggIDs)
ftl <- apply(interactome.go_rna_unrelated.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.go_rna_unrelated.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.go_rna_unrelated.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
interactome.go_rna_unrelated.df$ft_fdr <- p.adjust(interactome.go_rna_unrelated.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.go_rna_unrelated.df, file = "data/interactome.go_rna_unrelated.df.rda")
# summarizing data at "B" level before doing Fisher's Exact test
interactome.go_rna_unrelated.B.df <- data.frame(matrix(ncol = 5, nrow = length(unique(interactome.go_rna_unrelated.df$B))))
colnames(interactome.go_rna_unrelated.B.df) <- c("B", "A", "total", "count", "source")
interactome.go_rna_unrelated.B.df$B <- unique(interactome.go_rna_unrelated.df$B)
interactome.go_rna_unrelated.B.df$A <- sapply(unique(interactome.go_rna_unrelated.df$B), function(x) {A <- unique(interactome.go_rna_unrelated.df[which(interactome.go_rna_unrelated.df$B %in% x), "A"])})
interactome.go_rna_unrelated.B.df$source <- rep("GO_RNA_unrelated", nrow(interactome.go_rna_unrelated.B.df))
interactome.go_rna_unrelated.B.df$total <- sapply(unique(interactome.go_rna_unrelated.df$B), function(x) {tot <- sum(interactome.go_rna_unrelated.df[which(interactome.go_rna_unrelated.df$B %in% x), "total"])})
interactome.go_rna_unrelated.B.df$count <- sapply(unique(interactome.go_rna_unrelated.df$B), function(x) {count <- sum(interactome.go_rna_unrelated.df[which(interactome.go_rna_unrelated.df$B %in% x), "count"])})
# using WCL as background
ftl <- apply(interactome.go_rna_unrelated.B.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.go_rna_unrelated.B.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.go_rna_unrelated.B.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
interactome.go_rna_unrelated.B.df$ft_fdr <- p.adjust(interactome.go_rna_unrelated.B.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.go_rna_unrelated.B.df, file = "data/interactome.go_rna_unrelated.B.df")
#-----------GO RNA related-------------------------------------------
interactome.go_rna_related <- interactome[-which(interactome$GO == "unrelated"),]
interactome.go_rna_related.entrezIDs <- unique(interactome.go_rna_related[!is.na(interactome.go_rna_related$entrezgene),]$entrezgene)
interactome.go_rna_related.keggIDs <- keggConv.batch(interactome.go_rna_related.entrezIDs)
# we are testing this subset of "interactome", therefore we include all the pathways from "interactome"
interactome.go_rna_related.df <- interactome.df
# TODO - make sure that same background is used in all tests!!!
# we are now using interactome as background to test for enrichment
i1 <- intersect(rownames(interactome.go_rna_related.df), rownames(wcl.df))
interactome.go_rna_related.df$total <- rep(0, nrow(interactome.go_rna_related.df))
interactome.go_rna_related.df[i1,]$total <- wcl.df[i1,]$count
interactome.go_rna_related.df$source <- rep("GO_RNA_related", nrow(interactome.go_rna_related.df))
interactome.go_rna_related.df$ID <- rownames(interactome.go_rna_related.df)
interactome.go_rna_related.df$count <- rep(0, nrow(interactome.go_rna_related.df))
interactome.go_rna_related.df$frac <- rep(0, nrow(interactome.go_rna_related.df))
for (i in rownames(interactome.go_rna_related.df)) {
kL1 <- keggLink("mmu", paste("mmu", i, sep = ""))
interactome.go_rna_related.df[i, ]$count <- length(which(interactome.go_rna_related.keggIDs %in% kL1))
}
interactome.go_rna_related.in_path.IDs <- lapply(rownames(interactome.go_rna_related.df), function(x) {
kL1 <- keggLink("mmu", paste("mmu", x, sep = ""))
in_path <- interactome.go_rna_related.keggIDs[which(interactome.go_rna_related.keggIDs %in% kL1)]
})
names(interactome.go_rna_related.in_path.IDs) <- rownames(interactome.go_rna_related.df)
bkgd <- length(unique(wcl.keggIDs))
smpl <- length(interactome.go_rna_related.keggIDs)
ftl <- apply(interactome.go_rna_related.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.go_rna_related.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.go_rna_related.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
# changed p.adjust.method to "p.adjust.method" for more conservative control of p values, and set number to number of pathways in WCL
interactome.go_rna_related.df$ft_fdr <- p.adjust(interactome.go_rna_related.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.go_rna_related.df, file = "data/interactome.go_rna_related.df")
interactome.go_rna_related.B.df <- data.frame(matrix(ncol = 5, nrow = length(unique(interactome.go_rna_related.df$B))))
colnames(interactome.go_rna_related.B.df) <- c("B", "A", "total", "count", "source")
interactome.go_rna_related.B.df$B <- unique(interactome.go_rna_related.df$B)
interactome.go_rna_related.B.df$A <- sapply(unique(interactome.go_rna_related.df$B), function(x) {A <- unique(interactome.go_rna_related.df[which(interactome.go_rna_related.df$B %in% x), "A"])})
interactome.go_rna_related.B.df$source <- rep("GO_RNA_related", nrow(interactome.go_rna_related.B.df))
interactome.go_rna_related.B.df$total <- sapply(unique(interactome.go_rna_related.df$B), function(x) {tot <- sum(interactome.go_rna_related.df[which(interactome.go_rna_related.df$B %in% x), "total"])})
interactome.go_rna_related.B.df$count <- sapply(unique(interactome.go_rna_related.df$B), function(x) {count <- sum(interactome.go_rna_related.df[which(interactome.go_rna_related.df$B %in% x), "count"])})
ftl <- apply(interactome.go_rna_related.B.df, 1, function (x) {
ct <- as.integer(x["count"])
tt <- as.integer(x["total"])
m1 <- matrix(c(ct, tt, smpl - ct, bkgd - tt), 2, 2)
fisher.test(m1, alternative = alternative)
})
interactome.go_rna_related.B.df$ft_pval <- unlist(lapply(ftl, function(x) {x$p.value}))
interactome.go_rna_related.B.df$ft_OR <- unlist(lapply(ftl, function(x) {x$estimate}))
# changed p.adjust.method to "p.adjust.method" for more conservative control of p values, and set number to number of pathways in WCL
interactome.go_rna_related.B.df$ft_fdr <- p.adjust(interactome.go_rna_related.B.df$ft_pval, method = p.adjust.method, n = nrow(wcl.df))
save(interactome.go_rna_related.B.df, file = "data/interactome.go_rna_related.B.df.rda")
dfC <- rbind(interactome.df[, c("A", "B", "C", "ft_OR", "ft_fdr", "source", "count")],
interactome.go_rna_related.df[, c("A", "B", "C", "ft_OR", "ft_fdr", "source", "count")],
interactome.go_rna_unrelated.df[, c("A", "B", "C", "ft_OR", "ft_fdr", "source", "count")]
)
dfC$source <- as.factor(dfC$source)
dfC$source <- factor(dfC$source, levels = levels(dfC$source)[c(3,1,2)])
select1 <- unique(as.character(dfC[which(dfC$ft_fdr <= 0.1 & dfC$ft_OR > 1),]$C))
select1.pathIDs <- paste("mmu", unlist(lapply(strsplit(select1, "\\ "), function(x) x[1])), sep = "")
dfC <- dfC[which(dfC$C %in% select1),]
dfC$C <- as.factor(as.character(dfC$C))
dfC$ft_OR.cut <- cut(log2(dfC$ft_OR), breaks = c(-Inf,-4:4), right = F)
dfC$C <- factor(dfC$C, levels = levels(dfC$C)[dfC[dfC$source == "Interactome", "C"][order(dfC[which(dfC$source == "Interactome"),]$ft_OR.cut, decreasing = T)]])
# formatting labels etc for plotting
l1 <- levels(dfC$ft_OR.cut)
l1 <- gsub("\\[", "", l1)
l1 <- gsub("\\)", "", l1)
levels(dfC$ft_OR.cut) <- l1
l1 <- as.character(levels(dfC$C))
l1 <- unlist(lapply(strsplit(l1, " "), function(x) {
for (i in 2:length(x)){
if (i == 2){
v <- x[i]
} else {
v <- paste(v, x[i])
}
}
return(v)
}))
levels(dfC$C) <- l1
levels(dfC$source)[2:3] <- c("RNA-related", "RNA-unrelated")
levels(dfC$C)[3] <- "Ribosome biogenesis"
levels(dfC$C)[6] <- "TCA cycle"
levels(dfC$C)[7] <- "mRNA surveillance"
levels(dfC$C)[11] <- "AA biosynthesis"
levels(dfC$C)[8] <- "H. simplex infection"
levels(dfC$C)[9] <- "Antibiotic biosynthesis"
levels(dfC$C)[12] <- "Glycolysis/Gluconeogenesis"
flevels <- levels(dfC$source)
l1 <- factor(dfC$C, levels = levels(dfC$C)[c(1,2,3,7,4,5,6,12,8,9,10,11)])
dfC$C <- l1
p1 <- ggplot(data = dfC, aes(y = source, x = C)) +
geom_tile(aes(fill = ft_OR.cut), colour = "white") +
scale_fill_manual(values = brewer_pal(pal = "PuOr")(8), labels = levels(dfC$ft_OR.cut)) + #
theme(axis.text.y = element_text(angle = 0, size = 5), axis.title = element_blank()) +
guides(fill = guide_legend(label.position = "bottom", direction = "horizontal")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.9, hjust = 0.8, size = 6.6)) +
labs(fill = "Log2 OR") +
scale_y_discrete(limits = rev(flevels)) +
theme(legend.position = c(0.4,-1.92),
legend.text = element_text(size = 4),
legend.text.align = 0.5,
legend.title = element_text(size = 4, vjust = 5),
legend.key.size = unit(3.5, "mm"),
legend.key.width = unit(3.5, "mm"),
legend.margin = unit(0, "mm"),
panel.margin = unit(1, "mm"))
plot(p1)
ids <- unlist(lapply(strsplit(kegg.brite$C, " "), function(x) x[1]))
head(total.keggIDs)
save(total.keggIDs, file = "data/total.keggIDs.rda")
save(wcl, file = "data/wcl.rda")
save(interactome, file = "data/interactome.rda")
head(interactome)
load("data/interactome.df.rda")
load("data/interactome.go_rna_unrelated.df.rda")
load("data/interactome.go_rna_related.df.rda")
load("data/interactome.go_rna_related.df")
??unit
library(gdata)
library(biomaRt)
library(GO.db)
library(ggplot2)
human <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse <- useMart("ensembl", dataset = "mmusculus_gene_ensembl")
attribs <- listAttributes(mouse)
filters <- listFilters(mouse)
attribs.hsap <- listAttributes(human)
cv.assoc.proteins <- read.xls("/Volumes/MHS//workgroups/jcsmr//PreissLab/Sebastian Kurscheid/Annotations//GO/cardiovascular_associated_proteins.xlsx", sheet = 1, header = T, as.is = T)
cv.assoc.proteins <- read.xls("/Volumes/MHS//workgroups/jcsmr//PreissLab/Sebastian Kurscheid/Annotations//GO/cardiovascular_associated_proteins.xlsx", sheet = 1, header = T, as.is = T)
write(cv.assoc.proteins, file = "data/cv.assoc.proteins.rda")
head(cv.assoc.proteins)
save(cv.assoc.proteins, file = "data/cv.assoc.proteins.rda")
wcl1 <- read.xls("/Users/u1001407/Dropbox/REM project-Sebastian/HL-1 interactome superset.xlsx", sheet = "WCL GO RNAbind" , as.is = T)
interactome1 <- read.xls("/Users/u1001407/Dropbox/REM project-Sebastian/HL-1 interactome superset.xlsx", sheet = "sheet 1" , as.is = T)
dim(wcl1)
dim(wcl)
head(wcl)
head(wcl1)
dim(interactome)
dim(interactome1)
load("data/wcl.rda")
load("data/interactome.rda")
dim(interactome)
head(interactome)
head(wcl)
2000000 * 1458
mmus.cv.assoc <- getBM(attributes = c("ensembl_gene_id", "uniprot_swissprot"), filters = "uniprot_swissprot", values = cv.assoc.proteins[which(cv.assoc.proteins$Taxon == "10090"), "ID"], mart = mouse)
hsap.cv.assoc <- getBM(attributes = c("ensembl_gene_id", "uniprot_swissprot"), filters = "uniprot_swissprot", values = cv.assoc.proteins[which(cv.assoc.proteins$Taxon == "9606"), "ID"], mart = human)
hsap.cv.assoc.mmus.homologs <- getBM(attributes = c("ensembl_gene_id", "mmusculus_homolog_ensembl_gene"), filters = "uniprot_swissprot", values = cv.assoc.proteins[which(cv.assoc.proteins$Taxon == "9606"), "ID"], mart = human)
i1 <- intersect(unique(mmus.cv.assoc$ensembl_gene_id), interactome$ensembl_gene_id)
i2 <- intersect(unique(hsap.cv.assoc.mmus.homologs$mmusculus_homolog_ensembl_gene), interactome$ensembl_gene_id)
i3 <- c(i1[which(!i1 %in% intersect(i1, i2))], i2[which(!i2 %in% intersect(i1, i2))])
interactome.go_ids <- getBM(attributes = c("ensembl_gene_id", "go_id"), filters = "ensembl_gene_id", values = interactome$ensembl_gene_id, mart = mouse)
wcl <- wcl[-which(wcl$ensembl_gene_id %in% interactome$ensembl_gene_id),]
wcl.go_ids <- getBM(attributes = c("ensembl_gene_id", "go_id"), filters = "ensembl_gene_id", values =wcl$ensembl_gene_id, mart = mouse)
cv.go_terms.bp <- c("GO:0007507", "GO:0048738", "GO:0008015", "GO:0050878", "GO:0001944", "GO:0042060", "GO:0006979", "GO:0016055", "GO:0006520", "GO:0050817", "GO:0006629", "GO:0006936", "GO:0048771", "GO:0051145", "GO:0007517", "GO:0042692", "GO:0048659")
cv.go_terms.cc <- c("GO:0005739", "GO:0005578")
xx <- as.list(GOTERM)
go.bp.offspring <- as.list(GOBPOFFSPRING)
go.cc.offspring <- as.list(GOCCOFFSPRING)
interactome.cv.go_bp.offsp <- sapply(cv.go_terms.bp, function(x) length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.bp.offspring[x])), "ensembl_gene_id"])))
interactome.cv.go_cc.offsp <- sapply(cv.go_terms.cc, function(x) length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.cc.offspring[x])), "ensembl_gene_id"])))
interactome.cv.go_bp.offsp.IDs <- sapply(cv.go_terms.bp, function(x) unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.bp.offspring[x])), "ensembl_gene_id"]))
interactome.cv.go_cc.offsp.IDs <- sapply(cv.go_terms.cc, function(x) unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.cc.offspring[x])), "ensembl_gene_id"]))
wcl.cv.go_bp.offsp <- sapply(cv.go_terms.bp, function(x) length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.bp.offspring[x])), "ensembl_gene_id"])))
wcl.cv.go_cc.offsp <- sapply(cv.go_terms.cc, function(x) length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.cc.offspring[x])), "ensembl_gene_id"])))
wcl.cv.go_bp.offsp.IDs <- sapply(cv.go_terms.bp, function(x) unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.bp.offspring[x])), "ensembl_gene_id"]))
wcl.cv.go_cc.offsp.IDs <- sapply(cv.go_terms.cc, function(x) unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.cc.offspring[x])), "ensembl_gene_id"]))
df.go_bp.interactome <- as.data.frame(interactome.cv.go_bp.offsp)
colnames(df.go_bp.interactome) <- "count"
df.go_bp.interactome$group <- rep("interactome", nrow(df.go_bp.interactome))
df.go_bp.wcl <- as.data.frame(wcl.cv.go_bp.offsp)
colnames(df.go_bp.wcl) <- "count"
df.go_bp.wcl$group <- rep("wcl", nrow(df.go_bp.wcl))
df.go_bp.wcl$id <- rownames(df.go_bp.wcl)
df.go_bp <- rbind(df.go_bp.interactome, df.go_bp.wcl)
df.go_bp$id <- c(rownames(df.go_bp.interactome), rownames(df.go_bp.wcl))
df.go_bp.wcl
df.go_bp.interactome
df.go_bp.interactome$id <- rownames(df.go_bp.interactome)
df.go_bp.interactome
df.go_bp.interactome$group <- "interactome"
df.go_bp.wcl$group <- "wcl"
df.go_bp <- rbind(df.go_bp.interactome, df.go_bp.wcl)
df.go_bp
df.go_bp$term <- sapply(df.go_bp$id, function(x) xx[x][[1]]@Term)
n1 <- length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.bp.offspring[cv.go_terms.bp])), "ensembl_gene_id"]))
n2 <- length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.bp.offspring[cv.go_terms.bp])), "ensembl_gene_id"]))
hist.go_bp <- ggplot(df.go_bp, aes(term, count, group = group, fill = group)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_bp <- hist.go_bp + theme(axis.text.x = element_text(angle = 90))
hist.go_bp <- hist.go_bp + labs(title = paste("CV-associated gene counts\n in GO BP terms for Interactome [N = ", n1, "] and WCL only [N = ", n2, "]", sep = ""))
hist.go_bp
df.go_cc <- as.data.frame(interactome.cv.go_cc.offsp)
colnames(df.go_cc)[1] <- "count"
df.go_cc$id <- rownames(df.go_cc)
df.go_cc$term <- sapply(rownames(df.go_cc), function(x) xx[x][[1]]@Term)
hist.go_cc <- ggplot(df.go_cc, aes(term, count)) + geom_histogram(stat = "identity", fill = "blue")
n <- length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n, "]", sep = ""))
hist.go_cc
df.go_cc.wcl <- as.data.frame(wcl.cv.go_cc.offsp)
colnames(df.go_cc.wcl) <- "count"
df.go_cc.wcl$group <- "wcl"
df.go_cc.wcl$id <- rownames(df.go_cc.wcl)
n1 <- length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
n1 <- length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
n2 <- length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
n2
n1
df.go_cc <- rbind(df.go_cc.wcl, df.go_cc.interactome)
df.go_cc.interactome <- as.data.frame(interactome.cv.go_cc.offsp)
colnames(df.go_cc.interactome)[1] <- "count"
df.go_cc.interactome$id <- rownames(df.go_cc.interactome)
df.go_cc.interactome$term <- sapply(rownames(df.go_cc.interactome), function(x) xx[x][[1]]@Term)
df.go_cc.wcl <- as.data.frame(wcl.cv.go_cc.offsp)
colnames(df.go_cc.wcl) <- "count"
df.go_cc.wcl$group <- "wcl"
df.go_cc.wcl$id <- rownames(df.go_cc.wcl)
df.go_cc <- rbind(df.go_cc.wcl, df.go_cc.interactome)
df.go_cc.wcl
df.go_cc.interactome
df.go_cc.interactome$group <- "interactome"
df.go_cc <- rbind(df.go_cc.wcl, df.go_cc.interactome)
df.go_cc.interactome <- as.data.frame(interactome.cv.go_cc.offsp)
colnames(df.go_cc.interactome)[1] <- "count"
df.go_cc.interactome$group <- "interactome"
df.go_cc.interactome$id <- rownames(df.go_cc.interactome)
df.go_cc.interactome$term <- sapply(rownames(df.go_cc.interactome), function(x) xx[x][[1]]@Term)
df.go_cc.wcl <- as.data.frame(wcl.cv.go_cc.offsp)
colnames(df.go_cc.wcl) <- "count"
df.go_cc.wcl$group <- "wcl"
df.go_cc.wcl$term <- sapply(rownames(df.go_cc.wcl), function(x) xx[x][[1]]@Term)
df.go_cc <- rbind(df.go_cc.wcl, df.go_cc.interactome)
df.go_cc.wcl
df.go_cc.interactome <- as.data.frame(interactome.cv.go_cc.offsp)
colnames(df.go_cc.interactome)[1] <- "count"
df.go_cc.interactome$group <- "interactome"
df.go_cc.interactome$id <- rownames(df.go_cc.interactome)
df.go_cc.interactome$term <- sapply(rownames(df.go_cc.interactome), function(x) xx[x][[1]]@Term)
df.go_cc.wcl <- as.data.frame(wcl.cv.go_cc.offsp)
colnames(df.go_cc.wcl) <- "count"
df.go_cc.wcl$group <- "wcl"
df.go_cc.wcl$id <- rownames(df.go_cc.wcl)
df.go_cc.wcl$term <- sapply(rownames(df.go_cc.wcl), function(x) xx[x][[1]]@Term)
df.go_cc <- rbind(df.go_cc.wcl, df.go_cc.interactome)
n1 <- length(unique(interactome.go_ids[which(interactome.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
n2 <- length(unique(wcl.go_ids[which(wcl.go_ids$go_id %in% unlist(go.cc.offspring[cv.go_terms.cc])), "ensembl_gene_id"]))
hist.go_cc <- ggplot(df.go_cc, aes(term, count)) + geom_histogram(stat = "identity", fill = "blue")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_cc <- ggplot(df.go_cc, aes(term, count)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_cc <- ggplot(df.go_cc, aes(term, count, group = group)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_cc <- ggplot(df.go_cc, aes(term, count, group = group, fill = group)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
levels(df.go_cc$group)
as.factor(df.go_cc$group)
df.go_cc$group <- as.factor(df.go_cc$group)
hist.go_cc <- ggplot(df.go_cc, aes(term, count, group = group, fill = group)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_bp
df.go_cc <- rbind(df.go_cc.interactome, df.go_cc.wcl)
df.go_cc$group <- as.factor(df.go_cc$group)
hist.go_cc <- ggplot(df.go_cc, aes(term, count, group = group, fill = group)) + geom_bar(postion = "dodge", stat = "identity")
hist.go_cc <- hist.go_cc + theme(axis.text.x = element_text(angle = 0))
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated Interactome genes\n GO CC [N = ", n1, "]", sep = ""))
hist.go_cc
hist.go_cc <- hist.go_cc + labs(title = paste("CV-associated gene counts\n in GO CC terms for Interactome [N = ", n1, "] and WCL only [N = ", n2, "]", sep = ""))
hist.go_cc
df1 <- data.frame(matrix(nrow = max(interactome.cv.go_bp.offsp) + 1, ncol = length(interactome.cv.go_bp.offsp)))
colnames(df1) <- names(interactome.cv.go_bp.offsp.IDs)
df1[1,] <- sapply(names(interactome.cv.go_bp.offsp.IDs), function(x) xx[x][[1]]@Term)
for (i in 1:length(interactome.cv.go_bp.offsp.IDs)) {
df1[1 : length(interactome.cv.go_bp.offsp.IDs[[i]]) + 1 , i] <- as.vector(unlist(interactome.cv.go_bp.offsp.IDs[i]))
}
head(df1)
dim(df1)
df1
xx
save(xx, file = "data/GOTERM.rda")
go.term <- xx
save(go.term, file = "data/GOTERM.rda")
save(go.bp.offspring, file = "data/go.bp.offspring.rda")
save(go.cc.offspring, file = "data/go.cc.offspring.rda")
save(go.term, file = "data/go.term.rda")
load("data/go.term.rda")
save(df.go_cc, file = "data/df.go_cc.rda")
save(df.go_bp, file = "data/df.go_bp.rda")
save(interactome.go_ids, file = "data/interactome.go_ids.rda")
load("data/go.bp.offspring.rda")
save(wcl.go_ids, file = "data/wcl.go_ids.rda")
